{
 "Description": "IDP CDK constructs sample for testing (SO9217)",
 "Resources": {
  "TextractSimpleAsyncWorkflow2D7D5B8D": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/TextractSimpleAsyncWorkflow/Resource"
   }
  },
  "TextractSimpleAsyncWorkflowPolicyDEA557C5": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "TextractSimpleAsyncWorkflow2D7D5B8D"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:PutBucketPolicy"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "TextractSimpleAsyncWorkflow2D7D5B8D",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "TextractSimpleAsyncWorkflow2D7D5B8D",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/TextractSimpleAsyncWorkflow/Policy/Resource"
   }
  },
  "TextractSimpleAsyncWorkflowAutoDeleteObjectsCustomResourceA0A53394": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "TextractSimpleAsyncWorkflow2D7D5B8D"
    }
   },
   "DependsOn": [
    "TextractSimpleAsyncWorkflowPolicyDEA557C5"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/TextractSimpleAsyncWorkflow/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "TextractSimpleAsyncWorkflowNotificationsC6B74026": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "TextractSimpleAsyncWorkflow2D7D5B8D"
    },
    "NotificationConfiguration": {
     "LambdaFunctionConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "Filter": {
        "Key": {
         "FilterRules": [
          {
           "Name": "prefix",
           "Value": "uploads"
          }
         ]
        }
       },
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "ExecutionThrottleExecutionsStartThrottle3E0BC122",
         "Arn"
        ]
       }
      }
     ]
    },
    "Managed": true
   },
   "DependsOn": [
    "TextractSimpleAsyncWorkflowAllowBucketNotificationsToTestWorkflowExecutionThrottleExecutionsStartThrottle666D193F560BE630"
   ],
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/TextractSimpleAsyncWorkflow/Notifications/Resource"
   }
  },
  "TextractSimpleAsyncWorkflowAllowBucketNotificationsToTestWorkflowExecutionThrottleExecutionsStartThrottle666D193F560BE630": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ExecutionThrottleExecutionsStartThrottle3E0BC122",
      "Arn"
     ]
    },
    "Principal": "s3.amazonaws.com",
    "SourceAccount": {
     "Ref": "AWS::AccountId"
    },
    "SourceArn": {
     "Fn::GetAtt": [
      "TextractSimpleAsyncWorkflow2D7D5B8D",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/TextractSimpleAsyncWorkflow/AllowBucketNotificationsToTestWorkflowExecutionThrottleExecutionsStartThrottle666D193F"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "b7f33614a69548d6bafe224d751a7ef238cde19097415e553fe8b63a4c8fd8a6.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x",
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "TextractSimpleAsyncWorkflow2D7D5B8D"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ],
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
    "aws:asset:path": "asset.b7f33614a69548d6bafe224d751a7ef238cde19097415e553fe8b63a4c8fd8a6",
    "aws:asset:property": "Code"
   }
  },
  "DocumentSplitterDocumentSplitterFunctionServiceRole2B8505C0": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/DocumentSplitter/DocumentSplitterFunction/ServiceRole/Resource"
   }
  },
  "DocumentSplitterDocumentSplitterFunctionServiceRoleDefaultPolicyAE458904": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject",
        "s3:ListBucket"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "s3:AbortMultipartUpload",
        "s3:CreateMultipartUpload",
        "s3:ListBucketMultipartUploads",
        "s3:ListMultipartUploadParts",
        "s3:PutObject"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:aws:s3:::",
           {
            "Ref": "TextractSimpleAsyncWorkflow2D7D5B8D"
           },
           "/doc-splits"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:aws:s3:::",
           {
            "Ref": "TextractSimpleAsyncWorkflow2D7D5B8D"
           },
           "/doc-splits/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "DocumentSplitterDocumentSplitterFunctionServiceRoleDefaultPolicyAE458904",
    "Roles": [
     {
      "Ref": "DocumentSplitterDocumentSplitterFunctionServiceRole2B8505C0"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/DocumentSplitter/DocumentSplitterFunction/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "DocumentSplitterDocumentSplitterFunction8D7C2CF0": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Architectures": [
     "x86_64"
    ],
    "Code": {
     "ImageUri": {
      "Fn::Sub": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:fb6960237c49395ef8f397810fba46f1b003ab87decd42ec9dba40e31e33b2e5"
     }
    },
    "Environment": {
     "Variables": {
      "S3_OUTPUT_BUCKET": {
       "Ref": "TextractSimpleAsyncWorkflow2D7D5B8D"
      },
      "S3_OUTPUT_PREFIX": "doc-splits",
      "LOG_LEVEL": "DEBUG",
      "MAX_NUMBER_OF_PAGES_PER_DOC": "10"
     }
    },
    "MemorySize": 10240,
    "PackageType": "Image",
    "Role": {
     "Fn::GetAtt": [
      "DocumentSplitterDocumentSplitterFunctionServiceRole2B8505C0",
      "Arn"
     ]
    },
    "Timeout": 900
   },
   "DependsOn": [
    "DocumentSplitterDocumentSplitterFunctionServiceRoleDefaultPolicyAE458904",
    "DocumentSplitterDocumentSplitterFunctionServiceRole2B8505C0"
   ],
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/DocumentSplitter/DocumentSplitterFunction/Resource",
    "aws:asset:path": "asset.fb6960237c49395ef8f397810fba46f1b003ab87decd42ec9dba40e31e33b2e5",
    "aws:asset:dockerfile-path": "Dockerfile",
    "aws:asset:property": "Code.ImageUri"
   }
  },
  "TestWorkflowRole42A18258": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": {
         "Fn::Join": [
          "",
          [
           "states.",
           {
            "Ref": "AWS::Region"
           },
           ".amazonaws.com"
          ]
         ]
        }
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/TestWorkflow/Role/Resource"
   }
  },
  "TestWorkflowRoleDefaultPolicyD4567D72": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "DocumentSplitterDocumentSplitterFunction8D7C2CF0",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "DocumentSplitterDocumentSplitterFunction8D7C2CF0",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "TestWorkflowRoleDefaultPolicyD4567D72",
    "Roles": [
     {
      "Ref": "TestWorkflowRole42A18258"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/TestWorkflow/Role/DefaultPolicy/Resource"
   }
  },
  "TestWorkflowA1324988": {
   "Type": "AWS::StepFunctions::StateMachine",
   "Properties": {
    "DefinitionString": {
     "Fn::Join": [
      "",
      [
       "{\"StartAt\":\"DocumentSplitter\",\"States\":{\"DocumentSplitter\":{\"End\":true,\"Retry\":[{\"ErrorEquals\":[\"Lambda.ClientExecutionTimeoutException\",\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2},{\"ErrorEquals\":[\"Lambda.TooManyRequestsException\",\"Lambda.Unknown\"],\"IntervalSeconds\":1,\"MaxAttempts\":100,\"BackoffRate\":1.1}],\"Type\":\"Task\",\"OutputPath\":\"$.Payload\",\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
       {
        "Fn::GetAtt": [
         "DocumentSplitterDocumentSplitterFunction8D7C2CF0",
         "Arn"
        ]
       },
       "\",\"Payload.$\":\"$\"}}}}"
      ]
     ]
    },
    "RoleArn": {
     "Fn::GetAtt": [
      "TestWorkflowRole42A18258",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "TestWorkflowRoleDefaultPolicyD4567D72",
    "TestWorkflowRole42A18258"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/TestWorkflow/Resource"
   }
  },
  "ExecutionThrottleDocumentQueueDC0218C5": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "ContentBasedDeduplication": true,
    "FifoQueue": true,
    "MessageRetentionPeriod": 1209600
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/ExecutionThrottle/DocumentQueue/Resource"
   }
  },
  "ExecutionThrottleIDPDocumentStatusTable22DB5AEF": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "dp",
      "AttributeType": "S"
     },
     {
      "AttributeName": "ddi",
      "AttributeType": "N"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "KeySchema": [
     {
      "AttributeName": "dp",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "ddi",
      "KeyType": "RANGE"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/ExecutionThrottle/IDPDocumentStatusTable/Resource"
   }
  },
  "ExecutionThrottleIDPExecutionsCounterTableFD3A37DA": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "n",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "KeySchema": [
     {
      "AttributeName": "n",
      "KeyType": "HASH"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/ExecutionThrottle/IDPExecutionsCounterTable/Resource"
   }
  },
  "ExecutionThrottleExecutionsStartThrottleServiceRoleB8FA6287": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/ExecutionThrottle/ExecutionsStartThrottle/ServiceRole/Resource"
   }
  },
  "ExecutionThrottleExecutionsStartThrottleServiceRoleDefaultPolicyAEE08680": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "states:StartExecution",
       "Effect": "Allow",
       "Resource": {
        "Ref": "TestWorkflowA1324988"
       }
      },
      {
       "Action": "sqs:SendMessage",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ExecutionThrottleDocumentQueueDC0218C5",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "dynamodb:GetItem",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "dynamodb:UpdateItem"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ExecutionThrottleIDPDocumentStatusTable22DB5AEF",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "ExecutionThrottleIDPExecutionsCounterTableFD3A37DA",
          "Arn"
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetObject",
        "s3:ListBucket"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ExecutionThrottleExecutionsStartThrottleServiceRoleDefaultPolicyAEE08680",
    "Roles": [
     {
      "Ref": "ExecutionThrottleExecutionsStartThrottleServiceRoleB8FA6287"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/ExecutionThrottle/ExecutionsStartThrottle/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "ExecutionThrottleExecutionsStartThrottle3E0BC122": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Architectures": [
     "x86_64"
    ],
    "Code": {
     "ImageUri": {
      "Fn::Sub": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:a32c14ec18cd7b73c4034bf3b13bf8bd6403b83eab86eedd1ab7373f37069438"
     }
    },
    "Environment": {
     "Variables": {
      "LOG_LEVEL": "INFO",
      "STATE_MACHINE_ARN": {
       "Ref": "TestWorkflowA1324988"
      },
      "EXECUTIONS_THRESHOLD": "1",
      "DOCUMENT_STATUS_TABLE": {
       "Ref": "ExecutionThrottleIDPDocumentStatusTable22DB5AEF"
      },
      "EXECUTIONS_COUNTER_TABLE": {
       "Ref": "ExecutionThrottleIDPExecutionsCounterTableFD3A37DA"
      },
      "DOCUMENT_QUEUE_URL": {
       "Ref": "ExecutionThrottleDocumentQueueDC0218C5"
      }
     }
    },
    "MemorySize": 512,
    "PackageType": "Image",
    "Role": {
     "Fn::GetAtt": [
      "ExecutionThrottleExecutionsStartThrottleServiceRoleB8FA6287",
      "Arn"
     ]
    },
    "Timeout": 300
   },
   "DependsOn": [
    "ExecutionThrottleExecutionsStartThrottleServiceRoleDefaultPolicyAEE08680",
    "ExecutionThrottleExecutionsStartThrottleServiceRoleB8FA6287"
   ],
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/ExecutionThrottle/ExecutionsStartThrottle/Resource",
    "aws:asset:path": "asset.a32c14ec18cd7b73c4034bf3b13bf8bd6403b83eab86eedd1ab7373f37069438",
    "aws:asset:dockerfile-path": "Dockerfile",
    "aws:asset:property": "Code.ImageUri"
   }
  },
  "ExecutionThrottleExecutionsQueueWorkerServiceRole176DF06D": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/ExecutionThrottle/ExecutionsQueueWorker/ServiceRole/Resource"
   }
  },
  "ExecutionThrottleExecutionsQueueWorkerServiceRoleDefaultPolicy97822875": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "states:StartExecution",
       "Effect": "Allow",
       "Resource": {
        "Ref": "TestWorkflowA1324988"
       }
      },
      {
       "Action": [
        "sqs:DeleteMessage",
        "sqs:ReceiveMessage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ExecutionThrottleDocumentQueueDC0218C5",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "dynamodb:GetItem",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "dynamodb:UpdateItem"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ExecutionThrottleIDPDocumentStatusTable22DB5AEF",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "ExecutionThrottleIDPExecutionsCounterTableFD3A37DA",
          "Arn"
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ExecutionThrottleExecutionsQueueWorkerServiceRoleDefaultPolicy97822875",
    "Roles": [
     {
      "Ref": "ExecutionThrottleExecutionsQueueWorkerServiceRole176DF06D"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/ExecutionThrottle/ExecutionsQueueWorker/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "ExecutionThrottleExecutionsQueueWorkerC5A17A95": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Architectures": [
     "x86_64"
    ],
    "Code": {
     "ImageUri": {
      "Fn::Sub": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:0730bbf626873f49d73760b9004cb763d830899d40d61d11e577991925451e88"
     }
    },
    "Environment": {
     "Variables": {
      "LOG_LEVEL": "INFO",
      "STATE_MACHINE_ARN": {
       "Ref": "TestWorkflowA1324988"
      },
      "EXECUTIONS_THRESHOLD": "1",
      "SQS_BATCH": "1",
      "DOCUMENT_STATUS_TABLE": {
       "Ref": "ExecutionThrottleIDPDocumentStatusTable22DB5AEF"
      },
      "EXECUTIONS_COUNTER_TABLE": {
       "Ref": "ExecutionThrottleIDPExecutionsCounterTableFD3A37DA"
      },
      "DOCUMENT_QUEUE_URL": {
       "Ref": "ExecutionThrottleDocumentQueueDC0218C5"
      }
     }
    },
    "MemorySize": 512,
    "PackageType": "Image",
    "Role": {
     "Fn::GetAtt": [
      "ExecutionThrottleExecutionsQueueWorkerServiceRole176DF06D",
      "Arn"
     ]
    },
    "Timeout": 300
   },
   "DependsOn": [
    "ExecutionThrottleExecutionsQueueWorkerServiceRoleDefaultPolicy97822875",
    "ExecutionThrottleExecutionsQueueWorkerServiceRole176DF06D"
   ],
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/ExecutionThrottle/ExecutionsQueueWorker/Resource",
    "aws:asset:path": "asset.0730bbf626873f49d73760b9004cb763d830899d40d61d11e577991925451e88",
    "aws:asset:dockerfile-path": "Dockerfile",
    "aws:asset:property": "Code.ImageUri"
   }
  },
  "ExecutionThrottleExecutionsThrottleCounterResetServiceRole6B033FE8": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/ExecutionThrottle/ExecutionsThrottleCounterReset/ServiceRole/Resource"
   }
  },
  "ExecutionThrottleExecutionsThrottleCounterResetServiceRoleDefaultPolicy5BBA4A45": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "states:ListExecutions",
       "Effect": "Allow",
       "Resource": {
        "Ref": "TestWorkflowA1324988"
       }
      },
      {
       "Action": [
        "dynamodb:GetItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ExecutionThrottleIDPExecutionsCounterTableFD3A37DA",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ExecutionThrottleExecutionsThrottleCounterResetServiceRoleDefaultPolicy5BBA4A45",
    "Roles": [
     {
      "Ref": "ExecutionThrottleExecutionsThrottleCounterResetServiceRole6B033FE8"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/ExecutionThrottle/ExecutionsThrottleCounterReset/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "ExecutionThrottleExecutionsThrottleCounterReset6E1D0969": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Architectures": [
     "x86_64"
    ],
    "Code": {
     "ImageUri": {
      "Fn::Sub": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:86cae4a88aad36acb36b59a2f5766087ace07001398342f20e0c934d192eaf67"
     }
    },
    "Environment": {
     "Variables": {
      "LOG_LEVEL": "INFO",
      "STATE_MACHINE_ARN": {
       "Ref": "TestWorkflowA1324988"
      },
      "EXECUTIONS_COUNTER_TABLE": {
       "Ref": "ExecutionThrottleIDPExecutionsCounterTableFD3A37DA"
      }
     }
    },
    "MemorySize": 128,
    "PackageType": "Image",
    "Role": {
     "Fn::GetAtt": [
      "ExecutionThrottleExecutionsThrottleCounterResetServiceRole6B033FE8",
      "Arn"
     ]
    },
    "Timeout": 900
   },
   "DependsOn": [
    "ExecutionThrottleExecutionsThrottleCounterResetServiceRoleDefaultPolicy5BBA4A45",
    "ExecutionThrottleExecutionsThrottleCounterResetServiceRole6B033FE8"
   ],
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/ExecutionThrottle/ExecutionsThrottleCounterReset/Resource",
    "aws:asset:path": "asset.86cae4a88aad36acb36b59a2f5766087ace07001398342f20e0c934d192eaf67",
    "aws:asset:dockerfile-path": "Dockerfile",
    "aws:asset:property": "Code.ImageUri"
   }
  },
  "ExecutionThrottleRuleB33B36E0": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "ScheduleExpression": "rate(1 minute)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "ExecutionThrottleExecutionsQueueWorkerC5A17A95",
        "Arn"
       ]
      },
      "Id": "Target0"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/ExecutionThrottle/Rule/Resource"
   }
  },
  "ExecutionThrottleRuleAllowEventRuleTestWorkflowExecutionThrottleExecutionsQueueWorker9F0D78B8189528A9": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ExecutionThrottleExecutionsQueueWorkerC5A17A95",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "ExecutionThrottleRuleB33B36E0",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/ExecutionThrottle/Rule/AllowEventRuleTestWorkflowExecutionThrottleExecutionsQueueWorker9F0D78B8"
   }
  },
  "ExecutionThrottleStateChange773D197A": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "EventPattern": {
     "source": [
      "aws.states"
     ],
     "detail-type": [
      "Step Functions Execution Status Change"
     ],
     "detail": {
      "status": [
       "SUCCEEDED",
       "FAILED",
       "TIMED_OUT",
       "ABORTED"
      ],
      "stateMachineArn": [
       {
        "Ref": "TestWorkflowA1324988"
       }
      ]
     }
    },
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "ExecutionThrottleExecutionsQueueWorkerC5A17A95",
        "Arn"
       ]
      },
      "Id": "Target0"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/ExecutionThrottle/StateChange/Resource"
   }
  },
  "ExecutionThrottleStateChangeAllowEventRuleTestWorkflowExecutionThrottleExecutionsQueueWorker9F0D78B884AFA0DE": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ExecutionThrottleExecutionsQueueWorkerC5A17A95",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "ExecutionThrottleStateChange773D197A",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/ExecutionThrottle/StateChange/AllowEventRuleTestWorkflowExecutionThrottleExecutionsQueueWorker9F0D78B8"
   }
  },
  "ExecutionThrottleRuleExecutionsThrottleCounterResetA62EC2C4": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "ScheduleExpression": "rate(5 minutes)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "ExecutionThrottleExecutionsThrottleCounterReset6E1D0969",
        "Arn"
       ]
      },
      "Id": "Target0"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/ExecutionThrottle/RuleExecutionsThrottleCounterReset/Resource"
   }
  },
  "ExecutionThrottleRuleExecutionsThrottleCounterResetAllowEventRuleTestWorkflowExecutionThrottleExecutionsThrottleCounterResetB96597BDB1329298": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ExecutionThrottleExecutionsThrottleCounterReset6E1D0969",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "ExecutionThrottleRuleExecutionsThrottleCounterResetA62EC2C4",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/ExecutionThrottle/RuleExecutionsThrottleCounterReset/AllowEventRuleTestWorkflowExecutionThrottleExecutionsThrottleCounterResetB96597BD"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\n\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    bucket = props[\"BucketName\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    request_type = event[\"RequestType\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    stack_id = event['StackId']\n\n    if managed:\n      config = handle_managed(request_type, notification_configuration)\n    else:\n      config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)\n\n    put_bucket_notification_configuration(bucket, config)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration):\n  external_notifications = find_external_notifications(bucket, stack_id)\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  def with_id(notification):\n    notification['Id'] = f\"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}\"\n    return notification\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef find_external_notifications(bucket, stack_id):\n  existing_notifications = get_bucket_notification_configuration(bucket)\n  external_notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return external_notifications\n\ndef get_bucket_notification_configuration(bucket):\n  return s3.get_bucket_notification_configuration(Bucket=bucket)\n\ndef put_bucket_notification_configuration(bucket, notification_configuration):\n  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/11RwU7DMAz9lt2zMBgHrmwIaRKIUrhPWep1pk084qSoqvrvpOnGyk5+ec+xn+07ebu4l4uZ+uG5Lqp5jTvZfXilKxGpbcdL2a2CrsCL9d6e0BgyqlG3F3p896JWZlco2UUhA2eQGcmKJ4o5bmNUCc/Baj9wMeOMe4HKyC6nGgY6xUuDc2nQbquYwbOc1HscmEGTORyJ0ZNrV4pBsIfj/tSAt15xxfIludvYhqqrhDS3h1elD2iTi+m7F/wdU94DhKQl0IuitcpQEZf2qXaj9wSi1wZs9Nnl4TRSjH0v1oE9mRyYgtOj8If/SZmjBgtwIo0XrZRoSzH9+Bb8MaS7rMkWOK4xa/2B7M0y3lU+zL4Yce6C9WhA5mP8BW8vL2fzAQAA"
   },
   "Metadata": {
    "aws:cdk:path": "TestWorkflow/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Outputs": {
  "DocumentUploadLocation": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "s3://",
      {
       "Ref": "TextractSimpleAsyncWorkflow2D7D5B8D"
      },
      "/uploads/"
     ]
    ]
   }
  },
  "StepFunctionFlowLink": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "AWS::Region"
      },
      ".console.aws.amazon.com/states/home?region=",
      {
       "Ref": "AWS::Region"
      },
      "#/statemachines/view/",
      {
       "Ref": "TestWorkflowA1324988"
      }
     ]
    ]
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}